slap = (tables=<-) => tables |> keep(columns: ["_field", "_time", "_value"]) |> group(columns: ["_field"]) |> sort(columns: ["_time"])

t0 = 2023-02-14T00:00:00Z

gen = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "daily" and r["_field"] == "generation")
  |> aggregateWindow(every: 1d, fn: last, createEmpty: false)
  |> slap()

batt = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "inverter")
  |> filter(fn: (r) => r["_field"] == "batt_level")
  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
  |> slap()

daylen = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "sun")
  |> filter(fn: (r) => r["_field"] == "daylen")
  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
  |> slap()

elevation = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "sun")
  |> filter(fn: (r) => r["_field"] == "elevation")
  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
  |> slap()

uvi = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "weather")
  |> filter(fn: (r) => r["_field"] == "uvi")
  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
  |> slap()

cloud = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "weather")
  |> filter(fn: (r) => r["_field"] == "cloud")
  |> aggregateWindow(every: 1d, fn: max, createEmpty: false)
  |> slap()

weather = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "weather")
  |> filter(fn: (r) => r["_field"] == "forecast")
  |> aggregateWindow(every: 1d, fn: first, createEmpty: false)
  

solcast = from(bucket: "solar")
  |> range(start: t0, stop: today())
  |> filter(fn: (r) => r["_measurement"] == "solcast")
  |> filter(fn: (r) => r["_field"] == "forecast")
  |> slap()
  |> window(every: 1d)
  |> integral(unit: 30s, interpolate: "linear")
  |> map(fn: (r) => ({_field: "solcast", _time: r._start, _value: r._value}))

union( tables: [gen, batt, daylen, elevation, uvi, cloud, solcast]) // , weather
|> pivot(columnKey: ["_field"], rowKey: ["_time"], valueColumn: "_value")
|> yield()